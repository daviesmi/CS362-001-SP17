/*
 * This file was automatically generated by EvoSuite
 * Wed May 31 06:30:42 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
import edu.osu.cs362.Appt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Appt_ESTest extends Appt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "FW#SNS&", "FW#SNS&");
      appt0.setStartMonth(8);
      appt0.setStartDay(8);
      appt0.toString();
      assertEquals(8, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt(8, 0, 1, 8, 1, "T&.?r'.VY", "T&.?r'.VY");
      appt0.setStartMinute(59);
      assertEquals(59, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 12, 12, 12, "i=>\"0,.(`GFht]OeTl", "i=>\"0,.(`GFht]OeTl");
      appt0.setStartHour(23);
      assertEquals(23, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 11, 1, 0, (String) null, "PXMizycmz_M+2xEw");
      boolean boolean0 = appt0.getValid();
      assertEquals(11, appt0.getStartDay());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertEquals("PXMizycmz_M+2xEw", appt0.getDescription());
      assertTrue(boolean0);
      assertEquals(0, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Appt appt0 = new Appt(16, (-1330), (-1330), (-1330), 16, "", "");
      appt0.getTitle();
      assertEquals(16, appt0.getStartYear());
      assertEquals(-1330, appt0.getStartMinute());
      assertEquals(-1330, appt0.getStartMonth());
      assertEquals(16, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(-1330, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Appt appt0 = new Appt((-898), 11, (-898), 0, 0, "", "");
      int int0 = appt0.getStartYear();
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(-898, appt0.getStartHour());
      assertEquals(-898, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt(3, 3, 3, 23, 3, "p`kX9=WU4m", "p`kX9=WU4m");
      int int0 = appt0.getStartYear();
      assertEquals(23, appt0.getStartMonth());
      assertEquals(3, appt0.getStartDay());
      assertEquals(3, appt0.getStartHour());
      assertEquals(3, int0);
      assertEquals(3, appt0.getStartMinute());
      assertEquals("p`kX9=WU4m", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals("p`kX9=WU4m", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt(59, 0, 59, 1544, 0, "", "");
      int int0 = appt0.getStartMonth();
      assertEquals(59, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertEquals(1544, int0);
      assertEquals(0, appt0.getStartMinute());
      assertEquals(59, appt0.getStartHour());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt(0, (-1081), (-1081), (-1081), (-1081), "InvalidXGCRepresentation", "--%M-%D%z");
      int int0 = appt0.getStartMinute();
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(-1081, appt0.getStartDay());
      assertEquals(-1081, appt0.getStartMonth());
      assertEquals("--%M-%D%z", appt0.getDescription());
      assertEquals(-1081, appt0.getStartYear());
      assertEquals((-1081), int0);
      assertEquals("InvalidXGCRepresentation", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 31, 351, 351, ";BsQhTf$Ii", "AcD");
      assertEquals(0, appt0.getStartHour());
      
      appt0.setStartHour(31);
      int int0 = appt0.getStartHour();
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, (-635), (-635), "LGEY$RNgOswF", " ,");
      int int0 = appt0.getStartDay();
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, int0);
      assertFalse(appt0.getValid());
      assertEquals("LGEY$RNgOswF", appt0.getTitle());
      assertEquals(-635, appt0.getStartYear());
      assertEquals(" ,", appt0.getDescription());
      assertEquals(-635, appt0.getStartMonth());
      assertEquals(0, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt(791, 791, 791, 791, 791, "", " at ");
      int int0 = appt0.getStartDay();
      assertEquals("", appt0.getTitle());
      assertEquals(791, appt0.getStartHour());
      assertEquals(791, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(" at ", appt0.getDescription());
      assertEquals(791, appt0.getStartMonth());
      assertEquals(791, int0);
      assertEquals(791, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt(2980, (-2156), 11, (-2156), (-10), "tx7CNWzj`+ U", "");
      String string0 = appt0.getDescription();
      assertEquals(11, appt0.getStartDay());
      assertEquals("", string0);
      assertFalse(appt0.getValid());
      assertEquals("tx7CNWzj`+ U", appt0.getTitle());
      assertEquals(-2156, appt0.getStartMonth());
      assertEquals(-2156, appt0.getStartMinute());
      assertEquals(2980, appt0.getStartHour());
      assertEquals(-10, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt((-898), 11, (-898), 0, 0, "", "");
      appt0.setDescription("");
      assertEquals(0, appt0.getStartYear());
      assertEquals(-898, appt0.getStartHour());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(-898, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt((-2147), (-2147), (-2147), (-2147), (-2147), "xu,k8b-763", "xu,k8b-763");
      assertEquals("xu,k8b-763", appt0.getDescription());
      
      appt0.setDescription((String) null);
      assertEquals(-2147, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt((-898), 11, (-898), 0, 0, "", "");
      appt0.setTitle("");
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(-898, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(-898, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 11, 1, 0, (String) null, "PXMizycmz_M+2xEw");
      assertEquals("", appt0.getTitle());
      
      appt0.setTitle((String) null);
      assertEquals(0, appt0.getStartMinute());
      assertEquals(11, appt0.getStartDay());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals("PXMizycmz_M+2xEw", appt0.getDescription());
      assertTrue(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt(15, 15, 15, 15, 15, "`kX9=WU4m", "`kX9=WU4m");
      String string0 = appt0.getTitle();
      assertEquals(15, appt0.getStartHour());
      assertEquals("`kX9=WU4m", appt0.getDescription());
      assertEquals(15, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(15, appt0.getStartYear());
      assertEquals("`kX9=WU4m", string0);
      assertEquals(15, appt0.getStartMinute());
      assertEquals(15, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt((-898), 11, (-898), 0, 0, "", "");
      int int0 = appt0.getStartDay();
      assertEquals(11, appt0.getStartMinute());
      assertEquals(-898, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals((-898), int0);
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt((-842), 0, (-107), (-842), (-842), "D D7V[`.%", "D D7V[`.%");
      boolean boolean0 = appt0.getValid();
      assertEquals("D D7V[`.%", appt0.getTitle());
      assertFalse(boolean0);
      assertEquals(-107, appt0.getStartDay());
      assertEquals(-842, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(-842, appt0.getStartHour());
      assertEquals(-842, appt0.getStartYear());
      assertEquals("D D7V[`.%", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt((-842), 0, (-107), (-842), (-842), "D D7V[`.%", "D D7V[`.%");
      int int0 = appt0.getStartHour();
      assertEquals(0, appt0.getStartMinute());
      assertEquals("D D7V[`.%", appt0.getTitle());
      assertEquals(-842, appt0.getStartMonth());
      assertEquals("D D7V[`.%", appt0.getDescription());
      assertEquals(-107, appt0.getStartDay());
      assertEquals(-842, appt0.getStartYear());
      assertEquals((-842), int0);
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt((-842), 0, (-107), (-842), (-842), "D D7V[`.%", "D D7V[`.%");
      int int0 = appt0.getStartYear();
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals("D D7V[`.%", appt0.getDescription());
      assertEquals(-842, appt0.getStartHour());
      assertEquals(-842, appt0.getStartMonth());
      assertEquals("D D7V[`.%", appt0.getTitle());
      assertEquals((-842), int0);
      assertEquals(-107, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(8, 0, 1, 8, 1, "T&.?r'.VY", "T&.?r'.VY");
      String string0 = appt0.getDescription();
      assertTrue(appt0.getValid());
      assertEquals(8, appt0.getStartMonth());
      assertEquals(8, appt0.getStartHour());
      assertEquals("T&.?r'.VY", appt0.getTitle());
      assertEquals("T&.?r'.VY", string0);
      assertEquals(0, appt0.getStartMinute());
      assertEquals(1, appt0.getStartDay());
      assertEquals(1, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Appt appt0 = new Appt(1032, 2647, 7, (-609), 2647, "z<O%Ho3cNuDDW|2#", "");
      int int0 = appt0.getStartMonth();
      assertEquals("", appt0.getDescription());
      assertEquals(7, appt0.getStartDay());
      assertEquals(2647, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(1032, appt0.getStartHour());
      assertEquals(2647, appt0.getStartYear());
      assertEquals("z<O%Ho3cNuDDW|2#", appt0.getTitle());
      assertEquals((-609), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 12, 12, 12, "i=>\"0,.(`GFht]OeTl", "i=>\"0,.(`GFht]OeTl");
      String string0 = appt0.toString();
      assertEquals("\t12/12/12 at 12:12pm ,i=>\"0,.(`GFht]OeTl, i=>\"0,.(`GFht]OeTl\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt(1032, 2647, 7, (-609), 2647, "z<O%Ho3cNuDDW|2#", "");
      String string0 = appt0.toString();
      assertEquals(-609, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertNull(string0);
      assertEquals(7, appt0.getStartDay());
      assertEquals(2647, appt0.getStartMinute());
      assertEquals("z<O%Ho3cNuDDW|2#", appt0.getTitle());
      assertEquals(1032, appt0.getStartHour());
      assertEquals(2647, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 46, (-583), 1126, "InvalidXGCValue-milli", "InvalidXGCValue-milli");
      assertEquals(-583, appt0.getStartMonth());
      assertEquals(46, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals("InvalidXGCValue-milli", appt0.getDescription());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(1126, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertEquals("InvalidXGCValue-milli", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "BZ&=", "");
      int int0 = appt0.getStartMinute();
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, int0);
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("BZ&=", appt0.getTitle());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Appt appt0 = new Appt(5, 115, 4191, 0, 59, "org.apache.xerces.jaxp.datatype.DurationImpl", "org.apache.xerces.jaxp.datatype.DurationImpl");
      int int0 = appt0.getStartMonth();
      assertEquals(59, appt0.getStartYear());
      assertEquals(0, int0);
      assertEquals(115, appt0.getStartMinute());
      assertEquals(4191, appt0.getStartDay());
      assertEquals(5, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals("org.apache.xerces.jaxp.datatype.DurationImpl", appt0.getTitle());
      assertEquals("org.apache.xerces.jaxp.datatype.DurationImpl", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Appt appt0 = new Appt(0, (-1081), (-1081), (-1081), (-1081), "InvalidXGCRepresentation", "--%M-%D%z");
      int int0 = appt0.getStartHour();
      assertEquals(-1081, appt0.getStartYear());
      assertEquals("--%M-%D%z", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals("InvalidXGCRepresentation", appt0.getTitle());
      assertEquals(-1081, appt0.getStartMonth());
      assertEquals(-1081, appt0.getStartDay());
      assertEquals(0, int0);
      assertEquals(-1081, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Appt appt0 = new Appt((-898), 11, (-898), 0, 0, "", "");
      int int0 = appt0.getStartMinute();
      assertEquals(-898, appt0.getStartHour());
      assertEquals(11, int0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(-898, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 11, 1, 0, (String) null, "PXMizycmz_M+2xEw");
      assertEquals(0, appt0.getStartYear());
      
      appt0.setStartYear(11);
      assertEquals(1, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 31, 351, 351, ";BsQhTf$Ii", "AcD");
      assertEquals(351, appt0.getStartMonth());
      
      appt0.setStartMonth(0);
      assertEquals(31, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Appt appt0 = new Appt(11, 31, 11, 3, (-2002), (String) null, (String) null);
      String string0 = appt0.toString();
      assertEquals("\t3/11/-2002 at 11:31am ,, \n", string0);
      assertNotNull(string0);
  }
}
